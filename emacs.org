* My emacs config

Many ideas taken from https://github.com/Kaali/vj-emacs-0x12

** Usage

#+BEGIN_EXAMPLE
  cd $HOME
  git clone https://github.com/akheron/emacs-config .emacs-config
  ln -s .emacs-config/emacs .emacs
#+END_EXAMPLE

** Bootstrap
*** Enable lexical binding

#+BEGIN_SRC emacs-lisp
  ;;; -*- lexical-binding: t; -*-
#+END_SRC

*** Paths

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (defvar akheron--config-root "~/.emacs-config"
      "Root path of emacs config")

    (defun akheron--config-path (path)
      (expand-file-name (concat (file-name-as-directory akheron--config-root) path)))

    (setq default-directory (expand-file-name "~/"))
    (add-to-list 'load-path (akheron--config-path "lib")))
#+END_SRC

Find executables also in =~/local/bin=.

#+BEGIN_SRC emacs-lisp
  (setq exec-path (cons "~/local/bin" exec-path))
#+END_SRC

*** Customize

Save Customize variables to a separate file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (akheron--config-path "custom.el"))
  (load custom-file t)
#+END_SRC

*** Package management

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "http://melpa.org/packages/")))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

Needed by use-package

#+BEGIN_SRC emacs-lisp
  (use-package diminish)
  (use-package bind-key)
#+END_SRC

** Global configuration

Based on "Effective emacs": http://steve.yegge.googlepages.com/effective-emacs

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message 1)
  (setq make-backup-files nil)
  (setq confirm-kill-emacs 'y-or-n-p)
  (setq tab-width 8)

  (global-font-lock-mode 1)
  (line-number-mode 1)
  (column-number-mode 1)
  (and (functionp 'tool-bar-mode) (tool-bar-mode -1))
  (and (functionp 'scroll-bar-mode) (scroll-bar-mode -1))
  (menu-bar-mode -1)
  (transient-mark-mode -1)
  (mouse-avoidance-mode 'jump)
  (subword-mode)
#+END_SRC

Disable abbrev-mode
#+BEGIN_SRC emacs-lisp
  (setq-default abbrev-mode nil)
#+END_SRC

Fix dead keys

#+BEGIN_SRC emacs-lisp
  (require 'iso-transl)
#+END_SRC

Global key bindings

#+BEGIN_SRC emacs-lisp
  (bind-key "C-w" 'backward-kill-word)
  (bind-key "C-x C-k" 'kill-region)
  (bind-key "M-r" 'isearch-backward-regexp)
  (bind-key "M-s" 'isearch-forward-regexp)
  (bind-key "<f5>" 'call-last-kbd-macro)

  (bind-key "M-n" 'forward-paragraph)
  (bind-key "M-p" 'backward-paragraph)
  (bind-key "C-M-n" (lambda () (interactive) (forward-line 12)))
  (bind-key "C-M-p" (lambda () (interactive) (forward-line -12)))
  (bind-key "C-x C-g" 'goto-line)

  (bind-key "M--" 'dabbrev-expand)
  (bind-key "C-M-y" 'clipboard-yank)

  ; Disable compose-mail
  (bind-key "C-x m" nil)

  (if window-system
    ;; Window system present
    (progn
      ;; Disable iconifying with C-x C-z
      (bind-key "C-x C-z" nil))

    ;; Running in console
    (progn
      ;; Bind backward-delete-char to ^H
      (bind-key "C-h" 'backward-delete-char)))

  (bind-key "C-x p" (lambda () (interactive) (other-window -1)))
  (bind-key "C-z" nil)

  ; Copy to clipboard
  (bind-key "C-x M-w" 'clipboard-kill-ring-save)

  ; Unset harmful keys
  (bind-key "M-DEL" nil)
  (bind-key "C-<up>" nil)
  (bind-key "C-<down>" nil)
  (bind-key "C-<left>" nil)
  (bind-key "C-<right>" nil)

  ; Imitate US keyboard layout
  (bind-key "M-;" 'beginning-of-buffer)
  (bind-key "M-:" 'end-of-buffer)

  ; see 50-buffers.el
  (bind-key "C-x 4 t" 'transpose-buffers)

  ; Always display the result of C-x 4 f (find-file-in-other-window) et
  ; al. in an existing window
  (setq display-buffer-overriding-action '(display-buffer-use-some-window . ()))
#+END_SRC

** Themes

[[https://github.com/dunstontc/darkplus-emacs][Dark+ theme]], [[https://github.com/todylu/monaco.ttf][Monaco font]]

#+BEGIN_SRC emacs-lisp
  (load "darkplus-theme")
  (set-face-attribute 'default nil :font "Input" :height 90)

#+END_SRC

** Don't rant about disabled functions
#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

** One space ends sentence

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Use the X primary selection for cutting & pasting
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-primary t)
  (setq x-select-enable-clipboard nil)
#+END_SRC

** Never indent with tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Show trailing whitespace
#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
#+END_SRC

** Server

Start server after initialization

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'server-start)
#+END_SRC

** Smarter move-beginning-of-line

#+BEGIN_SRC emacs-lisp
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)
#+END_SRC

** Buffers

#+BEGIN_SRC emacs-lisp
  ;; For buffer list: show the current line's buffer in other window and
  ;; hide the buffer list
  (defun show-buffer-in-other-window-and-close ()
    (interactive)
    (Buffer-menu-switch-other-window)
    (quit-window)
    (other-window 1))

  (defun my-buffer-menu-mode-hook ()
    (define-key Buffer-menu-mode-map "c" 'show-buffer-in-other-window-and-close))

  (add-hook 'Buffer-menu-mode-hook 'my-buffer-menu-mode-hook)

  (defun transpose-buffers (arg)
    "Transpose the buffers shown in two windows."
    (interactive "p")
    (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
      (while (/= arg 0)
        (let ((this-win (window-buffer))
              (next-win (window-buffer (funcall selector))))
          (set-window-buffer (selected-window) next-win)
          (set-window-buffer (funcall selector) this-win)
          (select-window (funcall selector)))
        (setq arg (if (plusp arg) (1- arg) (1+ arg))))))
#+END_SRC

** C/C++

#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4)
  (setq c-offsets-alist '((substatement-open . 0)
                          (case-label . +)
                          (brace-list-open . 0)
                          (statement-case-open . 0)))
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
  (use-package cider)
#+END_SRC

** CoffeeScript

#+BEGIN_SRC emacs-lisp
  (use-package coffee-mode
    :config
    (setq coffee-tab-width 2)
    (add-hook 'coffee-mode-hook
      #'(lambda ()
          (define-key coffee-mode-map (kbd "C-c C-;") 'coffee-indent-shift-left)
          (define-key coffee-mode-map (kbd "C-c C-:") 'coffee-indent-shift-right)
          (define-key coffee-mode-map (kbd "C-c C-c") 'comment-region)
          (define-key coffee-mode-map (kbd "C-c C-u") 'uncomment-region)
          (subword-mode)
          (which-function-mode))))
#+END_SRC

** Diff

#+BEGIN_SRC emacs-lisp
  (add-hook 'diff-mode-hook
     #'(lambda ()
         (define-key diff-mode-map "\M-q" 'fill-paragraph)))
#+END_SRC

** Django templates

#+BEGIN_SRC emacs-lisp
  (use-package django-html-mode
    :ensure f  ; In lib/
    :commands django-html-mode
    :config
    (add-hook 'django-html-mode-hook
              #'(lambda ()
                  (local-set-key (kbd "C-c %") 'django-close-tag))))
#+END_SRC

** Dockerfile

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :mode "Dockerfile$")
#+END_SRC

** Elm

#+BEGIN_SRC emacs-lisp
  (use-package elm-mode
    :config
    (add-hook 'elm-mode-hook
      #'(lambda ()
          (setq elm-indent-offset 4)
          (setq elm-format-elm-version "0.18")
          (subword-mode))))
#+END_SRC

** Frame title

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))
#+END_SRC

** git-gutter

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :config
    (global-git-gutter-mode t)
    (setq git-gutter:always-show-gutter t)
    (bind-key "C-x v =" 'git-gutter:popup-diff)
    (bind-key "C-x v n" 'git-gutter:next-hunk)
    (bind-key "C-x v p" 'git-gutter:previous-hunk))
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs$"
    :config
    (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation))

  (use-package intero
    :config
    (add-hook 'haskell-model-hook 'intero-mode))
#+END_SRC

** ido/smex

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :demand
    :bind (("M-x" . smex)
           ("M-X" . smex-major-mode-commands))
    :config
    (smex-initialize))

  (use-package ido
    :config
    (setq ido-create-new-buffer 'always)
    (setq ido-default-buffer-method 'selected-window)
    (setq ido-use-filename-at-point nil)
    (ido-mode t)
    (ido-everywhere t)
    (setq ido-enable-flex-matching t) ;fuzzy matching
    (setq ido-show-dot-for-dired nil)
    (setq ido-auto-merge-delay-time 1.50)
    (setq ido-max-directory-size 50000)

    (bind-key "M-X" 'smex-major-mode-commands)
    ;; This is the old M-x.
    (bind-key "C-c C-c M-x" 'execute-extended-command))

  (use-package idomenu
    :bind ("M-i" . idomenu))
#+END_SRC

** integers

Increment/decrement integer at point

#+BEGIN_SRC emacs-lisp
  (use-package integers
    :ensure f  ; In lib/
    :bind (("C-c +" . increment-integer-at-point)
           ("C-c -" . decrement-integer-at-point)))
#+END_SRC

** JavaScript

#+BEGIN_SRC emacs-lisp
  ;; Adapted from https://github.com/lunaryorn/old-emacs-configuration/blob/c854f4dd4555581f36665b844cd7c45034cf36a3/lisp/lunaryorn-flycheck.el#L62-L75

  (defun node-modules-executable (parent-dir executable-name)
    (expand-file-name (concat "node_modules/.bin/" executable-name) parent-dir))


  (defun node-modules-has-executable (parent-dir executable-name)
    (let ((executable-path (node-modules-executable parent-dir executable-name)))
      (and (file-regular-p executable-path)
           (file-executable-p executable-path))))

  (defun find-node-modules-executable (executable-name)
    (-when-let* ((file-name (buffer-file-name))
                 (root (locate-dominating-file file-name #'(lambda (dir) (node-modules-has-executable dir executable-name)))))
      (node-modules-executable root executable-name)))

  ;; Used in 90-flycheck.el
  (defun use-js-executables-from-node-modules ()
    "Set executables of JS checkers from local node modules."
    (pcase-dolist (`(,checker . ,module) '((javascript-jshint . "jshint")
                                           (javascript-eslint . "eslint")
                                           (javascript-jscs   . "jscs")))
      (when-let ((lint-executable (find-node-modules-executable module))
                 (executable-var (flycheck-checker-executable-variable checker)))
        (set (make-local-variable executable-var) lint-executable))))

  ;; End of adapted

  (use-package prettier-js)

  (use-package rjsx-mode
    :mode "\\.jsx?\\'"
    :bind (("C-m" . newline-and-indent)
           ("C-c C-c" . comment-region)
           ("C-c C-u" . uncomment-region)
           ("C-c C-n" . flycheck-next-error)
           ("C-c C-p" . flycheck-previous-error))
    :config
    (setq-default js2-mode-show-parse-errors nil)
    (setq-default js2-mode-show-strict-warnings nil)
    (add-hook 'rjsx-mode-hook #'(lambda ()
      (when-let ((prettier-executable (find-node-modules-executable "prettier")))
        (set (make-local-variable 'prettier-js-command) prettier-executable))
      (prettier-js-mode)
      (setq js2-basic-offset 2)
      (subword-mode))))
#+END_SRC

** JSON

js-mode is used for JSON

#+BEGIN_SRC emacs-lisp
  (setq-default js-indent-level 2)
#+END_SRC

** Jinja2

#+BEGIN_SRC emacs-lisp
  (use-package jinja2-mode
    :mode "\\.\\(jinja\\|j2\\)$")
#+END_SRC

** LaTeX

#+BEGIN_SRC emacs-lisp
  (add-hook 'latex-mode-hook
     #'(lambda ()
         (turn-on-auto-fill)
         (setq tex-open-quote "''")
         (setq tex-close-quote "''")))
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode "\\.md$")
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  ; Simpler modeline
  (setq-default mode-line-format
        (list " "
              ; Encoding
              'mode-line-mule-info
              ; */% indicators if the file has been modified
              'mode-line-modified
              "  "
              ; line, column, file %
              'mode-line-position
              "  "
              ; the name of the buffer (i.e. filename)
              ; note this gets automatically highlighted
              'mode-line-buffer-identification
              "  "
              ; major and minor modes in effect
              'mode-line-modes
              ; if which-func-mode is in effect, display which
              ; function we are currently in.
              '(which-func-mode ("" which-func-format "--"))
              "-%-"
              )
  )
#+END_SRC

** macrostep

#+BEGIN_SRC emacs-lisp
  (use-package macrostep
    :bind (:map emacs-lisp-mode-map
                ("C-c e" . macrostep-expand)))
#+END_SRC

** Email

#+BEGIN_SRC emacs-lisp
  (use-package sendmail
    :mode ("/tmp/mutt" . mail-mode)
    :hook (mail-mode . turn-on-auto-fill))
#+END_SRC

** org-mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode ("\\.org$" . org-mode)
    :config
    (setq org-src-fontify-natively t))
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (use-package python
    :mode ("\\.py$" . python-mode)
    :config
    (add-hook 'python-mode-hook
      #'(lambda ()
          (define-key python-mode-map "\C-m" 'newline-and-indent)
          (define-key python-mode-map (kbd "C-c C-;") 'python-indent-shift-left)
          (define-key python-mode-map (kbd "C-c C-:") 'python-indent-shift-right)
          (define-key python-mode-map (kbd "C-c C-c") 'comment-region)
          (define-key python-mode-map (kbd "C-c C-u") 'uncomment-region)
          (define-key python-mode-map (kbd "C-c C-n") 'flycheck-next-error)
          (define-key python-mode-map (kbd "C-c C-p") 'flycheck-previous-error)
          (electric-indent-local-mode -1)
          (subword-mode))))
#+END_SRC

** ReStructured text

#+BEGIN_SRC emacs-lisp
  (use-package rst-mode
    :ensure f  ; In lib/
    :mode "\\.rst$"
    :config
    (add-hook 'rst-mode-hook 'turn-on-auto-fill)
    (cond ((equal font-lock-global-modes t)
           (setq font-lock-global-modes '(not rst-mode)))
          ((and (listp font-lock-global-modes)
                (equal (car font-lock-global-modes) 'not))
           (append-to-list font-lock-global-modes 'rst-mode))))
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :mode "\\.rs$")
#+END_SRC

** SCSS

#+BEGIN_SRC emacs-lisp
  (defun akheron--scss-init ()
    (when (equal (file-name-extension buffer-file-name) "scss")
      (setq-local css-indent-offset 2)))

  (use-package scss-mode
    :mode "\\.scss$"
    :config
    (add-hook 'css-mode-hook #'akheron--scss-init))
#+END_SRC

** TypeScript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'")

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  (use-package tide
    :init (add-hook 'typescript-mode-hook #'setup-tide-mode))
#+END_SRC

** unfill

#+BEGIN_SRC emacs-lisp
  (use-package unfill
    :commands unfill-paragraph
    :bind ("C-M-q" . unfill-paragraph))
#+END_SRC

** uniquiry

Use 'foo|bar', 'foo|baz' style buffer naming

#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :ensure f  ; In lib/
    :config
    (setq uniquify-buffer-name-style 'post-forward))
#+END_SRC

** which-func

#+BEGIN_SRC emacs-lisp
  (use-package which-func
    :config
    (set-face-attribute 'which-func nil :foreground "white"))
#+END_SRC

** whitespace

#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :config
    (setq whitespace-line-column 78)
    (setq whitespace-style '(face lines-tail))
    (add-hook 'prog-mode-hook 'whitespace-mode))
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode "\\.yml$")
#+END_SRC

** sudoedit (via tramp)

#+BEGIN_SRC emacs-lisp
  (defun akheron--sudo-edit (&optional arg)
    "Edit currently visited file as root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                           (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))


  (bind-key "C-x C-r" #'akheron--sudo-edit)
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package grizzl
    ; Will be loaded by flycheck
    :defer t)


  (use-package flycheck
    :config
    (let ((virtualenv-dir "~/.virtualenvs/emacs"))
      ;; Only have flycheck bitching in left-fringe
      (setq flycheck-highlighting-mode 'lines)

      ;; Use grizzl instead of ido for completion
      (setq flycheck-completion-system 'grizzl)

      (setq-default flycheck-flake8rc
                    (expand-file-name "~/.emacs-config/conf/flake8rc"))

      ;; Remember to copy ~/.emacs-config/bin/flake8trunc to the
      ;; virtualenv's bin directory.
      (setq-default flycheck-python-flake8-executable
                    (concat (expand-file-name virtualenv-dir) "/bin/flake8trunc"))

      ;; Disable elisp checker.
      (setq flycheck-checkers (delq 'emacs-lisp-checkdoc flycheck-checkers))

      (setq flycheck-display-errors-delay 0.1)

      ;; Defined in 50-javascript.el
      (add-hook 'flycheck-mode-hook #'use-js-executables-from-node-modules)

      (add-hook 'after-init-hook #'global-flycheck-mode)))
#+END_SRC

** Final things

Clear the echo area

#+BEGIN_SRC emacs-lisp
  (princ "" t)
#+END_SRC
